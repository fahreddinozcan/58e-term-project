name: DevSecOps Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest

      - name: Run code linting with pylint
        run: pylint --disable=C0111,C0103 app/
      # - name: Run code formatting check with yapf
      #   run: yapf --diff --recursive app/
      - name: Run unit tests with coverage
        run: pytest app/tests/

  # Needs more research on how to implement the best
  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

      - name: Run secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  build-image:
    needs: security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: myapp:${{ github.sha }}
          load: true
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
      - name: Run container scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp:${{ github.sha}}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Upload Trivy scan results to Github Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

      - name: Configure Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Google Artifact Registery
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Tag and push image to GAR
        run: |
          docker tag myapp:${{ github.sha }} europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/myapp-repo/myapp:${{ github.sha }}
          docker push europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/myapp-repo/myapp:${{ github.sha }}

  deploy-to-k8s:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Debug GCP Configuration
        run: |
          echo "Checking gcloud configuration..."
          gcloud config list
          echo "Checking GCP project..."
          gcloud projects describe ${{ secrets.GCP_PROJECT_ID }} || echo "Failed to access project"
          echo "Checking available GKE clusters..."
          gcloud container clusters list --project ${{ secrets.GCP_PROJECT_ID }} || echo "Failed to list clusters"

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}
          kubectl config current-context

      - name: Update Kubernetes manifests
        run: |
          # Update image in deployment manifest with the built image
          sed -i "s|image: myapp:latest|image: europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/myapp-repo/myapp:${{ github.sha }}|g" k8s/deployment.yaml
          cat k8s/deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl rollout status deployment/myapp-deployment -n default
          kubectl rollout status deployment/myapp-deployment -n default
