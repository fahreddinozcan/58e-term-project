name: DevSecOps Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest pytest-cov

      # - name: Run code linting with pylint
      #   run: pylint app/

      - name: Run unit tests with coverage
        run: |
          pytest app/tests/

  security-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v3

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

      - name: Run secret scanning
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Check for Terraform files
        id: check_terraform
        run: |
          if [ -d "terraform" ]; then
            echo "terraform_exists=true" >> $GITHUB_OUTPUT
          else
            echo "terraform_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Scan Terraform with Checkov
        if: steps.check_terraform.outputs.terraform_exists == 'true'
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: terraform/
          framework: terraform
          output_format: cli,sarif
          output_file_path: console,terraform-results.sarif
          soft_fail: true

      - name: Upload Checkov scan results
        if: steps.check_terraform.outputs.terraform_exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: terraform-results.sarif

  build-image:
    needs: security-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build -t myapp:${{ github.sha }} .

      - name: Run container scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: myapp:${{ github.sha }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Configure Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: "gke-gcloud-auth-plugin"

      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev

      - name: Tag and push image to GAR
        run: |
          docker tag myapp:${{ github.sha }} europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/myapp-repo/myapp:${{ github.sha }}
          docker push europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/myapp-repo/myapp:${{ github.sha }}

  deploy-to-k8s:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: "gke-gcloud-auth-plugin"

      - name: Install GKE auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}
          kubectl config current-context

      - name: Install OPA Gatekeeper
        run: |
          kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/deploy/gatekeeper.yaml
          # Wait for Gatekeeper to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/gatekeeper-controller-manager -n gatekeeper-system

      - name: Update Gatekeeper constraint with registry info
        run: |
          REGISTRY="europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/myapp-repo"
          sed -i "s|<REGISTRY_PLACEHOLDER>|$REGISTRY|g" k8s/gatekeeper/constraint.yaml
          cat k8s/gatekeeper/constraint.yaml

      - name: Apply Gatekeeper template first
        run: |
          kubectl apply -f k8s/gatekeeper/constraint-template.yaml
          echo "Waiting for CRD to be registered..."
          sleep 10
          kubectl get crds | grep k8sallowedrepos || sleep 10
          kubectl get crds | grep k8sallowedrepos || sleep 10
          kubectl get crds | grep k8sallowedrepos

      - name: Apply Gatekeeper constraint
        run: |
          kubectl apply -f k8s/gatekeeper/constraint.yaml

      - name: Replace image reference in deployment.yaml
        run: |
          sed -i "s|image: myapp:latest|image: europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/myapp-repo/myapp:${{ github.sha }}|g" k8s/deployment.yaml
          cat k8s/deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          
      - name: Verify deployment passes OPA Gatekeeper validation
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 10
          
          # Check if the deployment has the ReplicaFailure condition
          REPLICA_FAILURE=$(kubectl get deployment myapp-deployment -o jsonpath='{.status.conditions[?(@.type=="ReplicaFailure")].status}')
          
          if [ "$REPLICA_FAILURE" == "True" ]; then
            echo "::error::Deployment failed OPA Gatekeeper validation!"
            
            # Get the failure message directly from the deployment status
            FAILURE_MSG=$(kubectl get deployment myapp-deployment -o jsonpath='{.status.conditions[?(@.type=="ReplicaFailure")].message}')
            echo "Failure message from deployment: $FAILURE_MSG"
            
            # Get the latest ReplicaSet
            LATEST_RS=$(kubectl get rs -l app=myapp --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}')
            echo "Latest ReplicaSet: $LATEST_RS"
            
            # Get detailed information about the ReplicaSet
            echo "\n==== ReplicaSet Details ===="
            kubectl describe rs $LATEST_RS
            
            # Get the error message from the ReplicaSet events
            echo "\n==== ReplicaSet Events ===="
            kubectl get events --field-selector involvedObject.name=$LATEST_RS
            
            # Check all recent events for OPA Gatekeeper validation errors
            echo "\n==== Recent OPA Gatekeeper Events ===="
            kubectl get events --field-selector reason=FailedCreate | grep "admission webhook\|validation.gatekeeper\|only-allow-project-registry" || echo "No specific OPA Gatekeeper events found"
            
            # Format the error for GitHub Actions
            echo "::error::OPA Gatekeeper blocked deployment: $FAILURE_MSG"
            
            # Show the deployment image that was rejected
            IMAGE=$(kubectl get deployment myapp-deployment -o jsonpath='{.spec.template.spec.containers[0].image}')
            echo "::error::Unauthorized image detected: $IMAGE"
            echo "Only images from europe-west1-docker.pkg.dev/cmpe-58e-term-project/myapp-repo/ are allowed"
            
            exit 1
          else
            echo "Deployment passed OPA Gatekeeper validation!"
          fi
